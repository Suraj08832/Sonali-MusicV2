# =======================================================
# ¬©Ô∏è 2025-26 All Rights Reserved by Purvi Bots (Im-Notcoder) üöÄ
# This source code is under MIT License üìú Unauthorized forking, importing, or using this code without giving proper credit will result in legal action ‚ö†Ô∏è
# üì© DM for permission : @TheSigmaCoder
# =======================================================

from pyrogram import Client, errors
from pyrogram.enums import ChatMemberStatus, ParseMode

import config
from ..logging import LOGGER


class Sona(Client):
    def __init__(self):
        LOGGER(__name__).info(f"s·¥õ Ä·¥Ä·¥õ…™…¥…¢  ô·¥è·¥õ...")
        super().__init__(
            name="SONALI_MUSIC",
            api_id=config.API_ID,
            api_hash=config.API_HASH,
            bot_token=config.BOT_TOKEN,
            in_memory=True,
            max_concurrent_transmissions=7,
        )

    async def start(self):
        await super().start()
        self.id = self.me.id
        self.name = self.me.first_name + " " + (self.me.last_name or "")
        self.username = self.me.username
        self.mention = self.me.mention

        try:
            await self.send_message(
                chat_id=config.LOGGER_ID,
                text=(
                    f"<u><b>¬ª {self.mention}</u>  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö :-</b>\n\n"
                    f"…™·¥Ö :- <code>{self.id}</code>\n"
                    f"…¥·¥Ä·¥ç·¥á :- {self.name}\n"
                    f"·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á :- @{self.username}"
                ),
            )
        except (errors.ChannelInvalid, errors.PeerIdInvalid):
            LOGGER(__name__).error(
                " ô·¥è·¥õ  ú·¥Äs “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á  ü·¥è…¢ …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü. ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á  ô·¥è·¥õ …™s ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ ú·¥á Ä·¥á."
            )
            exit()
        except Exception as ex:
            LOGGER(__name__).error(
                f" ô·¥è·¥õ  ú·¥Äs “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á  ü·¥è…¢ …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n   Ä·¥á·¥Äs·¥è…¥ :- {type(ex).__name__}."
            )
            exit()

        a = await self.get_chat_member(config.LOGGER_ID, self.id)
        if a.status != ChatMemberStatus.ADMINISTRATOR:
            LOGGER(__name__).error(
                "·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥Äs ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥  è·¥è·¥ú Ä  ü·¥è…¢ …¢ Ä·¥è·¥ú·¥ò/·¥Ñ ú·¥Ä…¥…¥·¥á ü."
            )
            exit()

        LOGGER(__name__).info(f"·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥Äs {self.name}")

    async def stop(self):
        await super().stop()

# ======================================================
# ¬©Ô∏è 2025-26 All Rights Reserved by Purvi Bots (Im-Notcoder) üòé
# üßë‚Äçüíª Developer : t.me/TheSigmaCoder
# üîó Source link : GitHub.com/Im-Notcoder/Sonali-MusicV2
# üì¢ Telegram channel : t.me/Purvi_Bots
# =======================================================
