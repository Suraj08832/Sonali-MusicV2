# =======================================================
# ¬©Ô∏è 2025-26 All Rights Reserved by Purvi Bots (suraj08832) üöÄ

# This source code is under MIT License üìú Unauthorized forking, importing, or using this code without giving proper credit will result in legal action ‚ö†Ô∏è
 
# üì© DM for permission : @brahix
# =======================================================

import asyncio
from typing import List

from pyrogram import Client, enums, filters
from pyrogram.enums import ChatMemberStatus
from pyrogram.errors import FloodWait
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from SONALI_MUSIC import app
from SONALI_MUSIC.utils.admin_check import is_admin

chatQueue: set[int] = set()
stopProcess: bool = False

async def scan_deleted_members(chat_id: int) -> List:
    return [member.user async for member in app.get_chat_members(chat_id) if member.user and member.user.is_deleted]

async def safe_edit(msg: Message, text: str):
    try:
        await msg.edit(text)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        await msg.edit(text)
    except Exception:
        pass

@app.on_message(filters.command(["zombies"]))
async def prompt_zombie_cleanup(_: Client, message: Message):
    if not await is_admin(message):
        return await message.reply("**üëÆüèª | ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**")

    deleted_list = await scan_deleted_members(message.chat.id)
    if not deleted_list:
        return await message.reply("**‚ü≥ | …¥·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ.**")

    total = len(deleted_list)
    est_time = max(1, total // 5)

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚úÖ  è·¥ás, ·¥Ñ ü·¥á·¥Ä…¥", callback_data=f"confirm_zombies:{message.chat.id}"),
                InlineKeyboardButton("‚ùå ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü", callback_data="cancel_zombies"),
            ]
        ]
    )

    await message.reply(
        (
            f"**‚ö†Ô∏è | “ì·¥è·¥ú…¥·¥Ö** `{total}` **·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs.**\n"
            f"**‚è≥ | ·¥ás·¥õ…™·¥ç·¥Ä·¥õ·¥á·¥Ö ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò ·¥õ…™·¥ç·¥á :-** `{est_time}s`\n\n"
            "·¥Ö**·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ ü·¥á·¥Ä…¥ ·¥õ ú·¥á·¥ç ??**"
        ),
        reply_markup=keyboard,
    )

@app.on_callback_query(filters.regex(r"^confirm_zombies"))
async def execute_zombie_cleanup(_: Client, cq: CallbackQuery):
    global stopProcess
    chat_id = int(cq.data.split(":")[1])

    if not await is_admin(cq):
        return await cq.answer("üëÆüèª | ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥Ñ·¥è…¥“ì…™ Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.", show_alert=True)

    if chat_id in chatQueue:
        return await cq.answer("‚ö†Ô∏è | ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥ ·¥ò Ä·¥è…¢ Ä·¥áss.", show_alert=True)

    bot_me = await app.get_chat_member(chat_id, "self")
    if bot_me.status != ChatMemberStatus.ADMINISTRATOR:
        return await cq.edit_message_text("**‚û† | …™ …¥·¥á·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs.**")

    chatQueue.add(chat_id)
    deleted_list = await scan_deleted_members(chat_id)
    total = len(deleted_list)

    status = await cq.edit_message_text(
        f"**üß≠ | “ì·¥è·¥ú…¥·¥Ö** `{total}` **·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs.**\n**ü•Ä | s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò...**"
    )

    removed = 0

    async def ban_member(user_id):
        try:
            await app.ban_chat_member(chat_id, user_id)
            return True
        except FloodWait as e:
            await asyncio.sleep(e.value)
            return await ban_member(user_id)
        except Exception:
            return False

    tasks = []
    for user in deleted_list:
        if stopProcess:
            break
        tasks.append(ban_member(user.id))

    batch_size = 20
    for i in range(0, len(tasks), batch_size):
        results = await asyncio.gather(*tasks[i:i + batch_size], return_exceptions=True)
        removed += sum(1 for r in results if r is True)
        await safe_edit(status, f"**‚ôªÔ∏è |  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö** `{removed}/{total}` **·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs...**")
        await asyncio.sleep(2)

    chatQueue.discard(chat_id)
    await safe_edit(status, f"**‚úÖ | s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö** `{removed}` **·¥è·¥ú·¥õ ·¥è“ì** `{total}` **·¥¢·¥è·¥ç ô…™·¥ás.**")

@app.on_callback_query(filters.regex(r"^cancel_zombies$"))
async def cancel_zombie_cleanup(_: Client, cq: CallbackQuery):
    await cq.edit_message_text("**‚ùå | ·¥Ñ ü·¥á·¥Ä…¥·¥ú·¥ò ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö.**")

# ======================================================
# ¬©Ô∏è 2025-26 All Rights Reserved by Purvi Bots (suraj08832) üòé

# üßë‚Äçüíª Developer : t.me/brahix
# üîó Source link : GitHub.com/suraj08832/Sonali-MusicV2
# üì¢ Telegram channel : t.me/about_brahix
# =======================================================
