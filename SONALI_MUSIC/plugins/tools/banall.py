# =======================================================
# ¬©Ô∏è 2025-26 All Rights Reserved by Purvi Bots (Im-Notcoder) üöÄ

# This source code is under MIT License üìú Unauthorized forking, importing, or using this code without giving proper credit will result in legal action ‚ö†Ô∏è
 
# üì© DM for permission : @TheSigmaCoder
# =======================================================

import asyncio
from pyrogram import Client, enums
from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import OWNER_ID
from SONALI_MUSIC import app

@app.on_message(filters.command(["banall"], prefixes=["/", "!"]))
async def banall_command(client, message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    chat_member = await client.get_chat_member(chat_id, user_id)

    if user_id == OWNER_ID or chat_member.status == enums.ChatMemberStatus.OWNER:
        await message.reply_text(
            "·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥Ö·¥Ä…¥·¥Ä ü ü ·¥ò Ä·¥è·¥Ñ·¥áss? ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.",
            reply_markup=InlineKeyboardMarkup(
                [[
                    InlineKeyboardButton("·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á", callback_data="approve_banall"),
                    InlineKeyboardButton("·¥Ö·¥á·¥Ñ ü…™…¥·¥á", callback_data="decline_banall")
                ]]
            )
        )
    else:
        await message.reply_text(" è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö. ·¥è…¥ ü è ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s.")

@app.on_callback_query(filters.regex("approve_banall"))
async def approve_banall(client, callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.first_name

    chat_member = await client.get_chat_member(chat_id, user_id)

    if user_id == OWNER_ID or chat_member.status == enums.ChatMemberStatus.OWNER:
        await callback_query.message.edit_text(f" ô·¥Ä…¥·¥Ä ü ü Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ ... ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á·¥Ö  ô è {user_name}.")

        bot = await client.get_chat_member(chat_id, client.me.id)
        bot_permission = bot.privileges.can_restrict_members

        if bot_permission:
            ban_count = 0
            async for member in client.get_chat_members(chat_id):
                try:
                    await client.ban_chat_member(chat_id, member.user.id)
                    ban_count += 1
                except Exception:
                    pass
            await callback_query.message.edit_text(f"<b><u>‚¨§  ô·¥Ä…¥·¥Ä ü ü ·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö!</b></u>\n\n<b>‚óè ·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs ‚û†</b> {ban_count}\n<b>‚óè  ô·¥Ä…¥…¥·¥á·¥Ö  ô è ‚û†</b> {user_name}")
        else:
            await callback_query.message.edit_text("…™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥õ·¥è  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ ·¥ús·¥á Äs ·¥è Ä  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ …™…¥ s·¥ú·¥Ö·¥è ·¥ús·¥á Äs.")
    else:
        await callback_query.message.edit_text(f"{user_name},  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥á ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.")

@app.on_callback_query(filters.regex("decline_banall"))
async def decline_banall(client, callback_query: CallbackQuery):
    user_name = callback_query.from_user.first_name
    await callback_query.message.edit_text(f"</b> ô·¥Ä…¥·¥Ä ü ü ·¥ò Ä·¥è·¥Ñ·¥áss  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö  ô è</b> {user_name}.")

# ======================================================
# ¬©Ô∏è 2025-26 All Rights Reserved by Purvi Bots (Im-Notcoder) üòé

# üßë‚Äçüíª Developer : t.me/TheSigmaCoder
# üîó Source link : GitHub.com/Im-Notcoder/Sonali-MusicV2
# üì¢ Telegram channel : t.me/Purvi_Bots
# =======================================================
